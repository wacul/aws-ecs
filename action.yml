name: aws-ecs
description: deploy aws ecs
inputs:
  key:
    description: 'AWS Access Key ID'
    required: true
  secret:
    description: 'AWS Secret Access Key'
    required: true
  region:
    description: 'Region name (default: us-east-1)'
    required: false
    default: us-east-1
  services-yaml:
    description: 'ecs service and task-definition settings file.'
    required: true
  environment-yaml:
    description: 'jinja2 template input json data file.'
    required: true
  deploy-service-group:
    description: 'Only matches between `deploy-service-group` and ecs task-defintion `service-group` value on `service-yml` are deployed. If do not set `deploy-service-group` value, all service and scheduled task is deployed'
    required: true
  template-group:
    description: 'For multiple repositories ecs cluster deployment. When delete unused service with multiple repositories deployment, service and scheduled task settings exists for each repository. Then, only matches between template-group and ecs task-definition`s environment TEMPLATE_GROUP value are targeted.'
    required: false
  service-update-only:
    description: 'If this value is true,  Do not delete service and register in task definition. (default: false)'
    required: false
  stop-before-deploy:
    description: 'If this value is false, `stopBeforeDeploy` option in `services-yml` is ignored.  (default: true)'
    required: false
  task-definition-update-only:
    description: 'If this value is true,  Just update task definition. (default: false)'
    required: false

runs:
  using: 'docker'
  image: 'docker://wacul/aws-ecs:latest'
  env:
    AWS_ECS_KEY: ${{ inputs.key }}
    AWS_ECS_SECRET: ${{ inputs.secret }}
    AWS_ECS_REGION: ${{ inputs.region }}
    AWS_ECS_SERVICES_YAML: ${{ inputs.services-yaml }}
    AWS_ECS_ENVIRONMENT_YAML: ${{ inputs.environment-yaml }}
    AWS_ECS_TEMPLATE_GROUP:  ${{ inputs.template-group }}
    AWS_ECS_DEPLOY_SERVICE_GROUP: ${{ inputs.deploy-service-group }}
    AWS_ECS_SERVICE_UPDATE_ONLY: ${{ inputs.service-update-only }}
    AWS_ECS_STOP_BEFORE_DEPLOY: ${{ inputs.stop-before-deploy }}
    AWS_ECS_TASK_DEFINITION_UPDATE_ONLY: ${{ inputs.task-definition-update-only }}
  entrypoint: '/app/entrypoint.sh'
